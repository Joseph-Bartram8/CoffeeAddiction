/* tslint:disable */
/* eslint-disable */
/**
 * Coffee Addiction API
 * Coffee Addiction API swagger documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BeansGet500Response,
  LoginPost200Response,
  LoginPostRequest,
  SignupPost200Response,
  SignupPostRequest,
} from '../models/index';
import {
    BeansGet500ResponseFromJSON,
    BeansGet500ResponseToJSON,
    LoginPost200ResponseFromJSON,
    LoginPost200ResponseToJSON,
    LoginPostRequestFromJSON,
    LoginPostRequestToJSON,
    SignupPost200ResponseFromJSON,
    SignupPost200ResponseToJSON,
    SignupPostRequestFromJSON,
    SignupPostRequestToJSON,
} from '../models/index';

export interface LoginPostOperationRequest {
    loginPostRequest: LoginPostRequest;
}

export interface SignupPostOperationRequest {
    signupPostRequest: SignupPostRequest;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Logs in a user with their email and password
     * Logs in a user
     */
    async loginPostRaw(requestParameters: LoginPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginPost200Response>> {
        if (requestParameters['loginPostRequest'] == null) {
            throw new runtime.RequiredError(
                'loginPostRequest',
                'Required parameter "loginPostRequest" was null or undefined when calling loginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginPostRequestToJSON(requestParameters['loginPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Logs in a user with their email and password
     * Logs in a user
     */
    async loginPost(requestParameters: LoginPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginPost200Response> {
        const response = await this.loginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Signs up a new user with their email, password, and other details
     * Signs up a new user
     */
    async signupPostRaw(requestParameters: SignupPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignupPost200Response>> {
        if (requestParameters['signupPostRequest'] == null) {
            throw new runtime.RequiredError(
                'signupPostRequest',
                'Required parameter "signupPostRequest" was null or undefined when calling signupPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupPostRequestToJSON(requestParameters['signupPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Signs up a new user with their email, password, and other details
     * Signs up a new user
     */
    async signupPost(requestParameters: SignupPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignupPost200Response> {
        const response = await this.signupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
